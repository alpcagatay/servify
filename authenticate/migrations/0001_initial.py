# Generated by Django 3.2.11 on 2022-01-24 15:21

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='Username')),
                ('email', models.EmailField(blank=True, max_length=96, null=True, verbose_name='Email address')),
                ('first_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='Last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date joined')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Super user')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Staff')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='images/profile/', verbose_name='Profile picture')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Bio')),
                ('credit', models.PositiveBigIntegerField(default=5, validators=[django.core.validators.MaxValueValidator(15), django.core.validators.MinValueValidator(0)], verbose_name='Credit')),
                ('onholdcredit', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(15), django.core.validators.MinValueValidator(0)], verbose_name='On hold credit')),
                ('followers', models.ManyToManyField(blank=True, related_name='followers_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=200)),
                ('destination', models.CharField(max_length=200)),
                ('distance', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, verbose_name='Service Name')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Service Date')),
                ('time', models.TimeField(default='12:00')),
                ('description', models.TextField()),
                ('venue', models.CharField(max_length=120, verbose_name='Venue Name')),
                ('credit', models.PositiveIntegerField()),
                ('service_picture', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('status', models.PositiveIntegerField(choices=[(1, 'Open'), (2, 'Closed'), (3, 'Done')], default=1)),
                ('applied_ones', models.ManyToManyField(blank=True, default='', related_name='service_applied_ones', to=settings.AUTH_USER_MODEL)),
                ('attendees', models.ManyToManyField(blank=True, default='', related_name='service_attendees', to=settings.AUTH_USER_MODEL)),
                ('others', models.ManyToManyField(blank=True, default='', related_name='service_others', to=settings.AUTH_USER_MODEL)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_provider', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Final_Service_Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_final_status', models.PositiveIntegerField(choices=[(1, 'Applied'), (2, 'Accepted'), (3, 'Completed'), (4, 'Not Completed'), (5, 'Rejected')])),
                ('service_final_status', models.ManyToManyField(default='', related_name='service_final_status', to='authenticate.Service')),
            ],
        ),
        migrations.CreateModel(
            name='Final_Event_Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_final_status', models.PositiveIntegerField(choices=[(1, 'Applied'), (2, 'Accepted'), (3, 'Completed'), (4, 'Not Completed'), (5, 'Rejected')])),
                ('event_final_status', models.ManyToManyField(default='', related_name='event_final_status', to='authenticate.Service')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, verbose_name='Event Name')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Event Date')),
                ('time', models.TimeField(default='12:00')),
                ('description', models.TextField()),
                ('venue', models.CharField(max_length=120, verbose_name='Venue Name')),
                ('credit', models.PositiveIntegerField(default=0)),
                ('service_picture', models.ImageField(blank=True, null=True, upload_to='')),
                ('event_picture', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('capacity', models.PositiveIntegerField(default=10)),
                ('status', models.PositiveIntegerField(choices=[(1, 'Open'), (2, 'Closed'), (3, 'Done')], default=1)),
                ('applied_ones', models.ManyToManyField(default='', related_name='event_applied_ones', to=settings.AUTH_USER_MODEL)),
                ('attendees', models.ManyToManyField(blank=True, default='', related_name='event_attendees', to=settings.AUTH_USER_MODEL)),
                ('others', models.ManyToManyField(blank=True, default='', related_name='event_others', to=settings.AUTH_USER_MODEL)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_provider', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
